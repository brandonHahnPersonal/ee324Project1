`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 09/09/2021 06:20:13 PM
// Design Name: 
// Module Name: four_to_four_counter
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module four_to_four_counter(
    input clock_input,
    input reset,
    output reg[3:0] digit_zero_out,
    output reg[3:0] digit_one_out,
    output reg[3:0] digit_two_out,
    output reg[3:0] digit_three_out
    );    
    
 always @ (posedge clock_input, posedge reset)    //Use star to list all that matter in the sensitivity list
    begin    
        if(reset)   //if reset is pressed, reset all digits to zero
        begin
            digit_zero_out <= 4'b0000;
            digit_one_out <= 4'b0000;
            digit_two_out <= 4'b0000;
            digit_three_out <= 4'b0000;
        end        
        else
        begin
        //$display (digit_three_out,digit_two_out,digit_one_outdigit_zero_out);
            digit_zero_out <= digit_zero_out + 4'b0001; //assign the least significant digit to the smallest counter
            if (digit_zero_out>= 4'b1010)
            begin
                digit_zero_out <= 4'b0000;    //if count is decimal 10 or higher, reset to zero    
                digit_one_out <= digit_one_out + 4'b0001;    //if reset the digit zero, increment digit 1 
                if (digit_one_out>= 4'b1010)    //if digit 1 is decimal 10 or higher, reset to zero
                begin
                    digit_one_out <= 4'b0000;    //if count is decimal 10 or higher, reset to zero    
                    digit_two_out <= digit_two_out + 4'b001;    //if reset the digit 1, increment digit 2
                    if (digit_two_out>= 4'b1010)    //if digit 2 is decimal 10 or higher, reset to zero
                    begin
                        digit_two_out <= 4'b0000;    //if count is decimal 10 or higher, reset to zero    
                        digit_three_out <= digit_three_out + 4'b001;    //if reset the digit 2, increment digit 3
                        if (digit_three_out>= 4'b1010)    //if digit 3 is decimal 10 or higher, reset to zero
                        begin
                            digit_three_out <= 4'b0000;    //if count is decimal 10 or higher, reset to zero    
                        end
                    end
                end
            end
        end
    end    
    
    
endmodule
